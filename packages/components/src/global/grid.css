/*
  THINK
  - [ ] confirm having responsive variables var(--foo-md) is not a bad idea
  - [ ] maybe we want fallbacks between breakpoints (the way tachyons or Theme UI works)
  - [ ] decide whether max-width should be responsive
  - [ ] decide whether max-width should be calculated instead of hard-coded
  - [ ] evaluate the possibility to not have to specify size in column number
        which is annoying (you won't remember the number of columns per breakpoint),
        and instead use something more generic (like half, third, 1/4, etc.)

  TODO
  - [ ] use em in @media
*/

/*
  columns / spacing / gutter
  --------------------------
  - sm  ->  4 / 16 / 32 (default)
  - md  ->  8 / 16 / 32
  - lg  -> 16 / 24 / 32
  - xl  -> 16 / 24 / 32
  - xxl -> 16 / 24 / 32

  --gutter-y - between columns
  --gutter-x - between rows 
  --spacing - padding
  --max-width (not responsive)
*/
scale-grid,
.scl-grid {
  display: grid;
  box-sizing: border-box;
  margin-left: auto;
  margin-right: auto;
  grid-template-columns: repeat(4, 1fr);
  padding-left: var(--spacing-sm, var(--scl-spacing-16, 1rem));
  padding-right: var(--spacing-sm, var(--scl-spacing-16, 1rem));
  column-gap: var(--gutter-y-sm, var(--scl-spacing-32, 2rem));
  row-gap: var(--gutter-x-sm, var(--scl-spacing-32, 2rem));
  /* xxl: (64px * 16 cols) + (32px * 15 gutters) + 24px + 24px */
  max-width: var(--max-width, 1552px);
}

/*
  --offset
  --size
*/
scale-grid-item,
.scl-grid-item {
  grid-column: var(--offset-sm, auto) / span var(--size-sm, 4);
}

/* md */
@media screen and (min-width: 640px) {
  scale-grid,
  .scl-grid {
    grid-template-columns: repeat(8, 1fr);
    padding-left: var(--spacing-md, var(--scl-spacing-16, 1rem));
    padding-right: var(--spacing-md, var(--scl-spacing-16, 1rem));
    column-gap: var(--gutter-y-md, var(--scl-spacing-32, 2rem));
    row-gap: var(--gutter-x-md, var(--scl-spacing-32, 2rem));
  }

  scale-grid-item,
  .scl-grid-item {
    grid-column: var(--offset-md, auto) / span var(--size-md, 4);
  }
}

/* lg */
@media screen and (min-width: 1040px) {
  scale-grid,
  .scl-grid {
    grid-template-columns: repeat(16, 1fr);
    padding-left: var(--spacing-lg, var(--scl-spacing-24, 1.5rem));
    padding-right: var(--spacing-lg, var(--scl-spacing-24, 1.5rem));
    column-gap: var(--gutter-y-lg, var(--scl-spacing-32, 2rem));
    row-gap: var(--gutter-x-lg, var(--scl-spacing-32, 2rem));
  }

  scale-grid-item,
  .scl-grid-item {
    grid-column: var(--offset-lg, auto) / span var(--size-lg, 4);
  }
}

/* xl */
@media screen and (min-width: 1296px) {
  scale-grid,
  .scl-grid {
    padding-left: var(--spacing-xl, var(--scl-spacing-24, 1.5rem));
    padding-right: var(--spacing-xl, var(--scl-spacing-24, 1.5rem));
    column-gap: var(--gutter-y-xl, var(--scl-spacing-32, 2rem));
    row-gap: var(--gutter-x-xl, var(--scl-spacing-32, 2rem));
  }

  scale-grid-item,
  .scl-grid-item {
    grid-column: var(--offset-xl, auto) / span var(--size-xl, 4);
  }
}

/* xxl */
@media screen and (min-width: 1552px) {
  scale-grid,
  .scl-grid {
    padding-left: var(--spacing-xxl, var(--scl-spacing-24, 1.5rem));
    padding-right: var(--spacing-xxl, var(--scl-spacing-24, 1.5rem));
    column-gap: var(--gutter-y-xxl, var(--scl-spacing-32, 2rem));
    row-gap: var(--gutter-x-xxl, var(--scl-spacing-32, 2rem));
  }

  scale-grid-item,
  .scl-grid-item {
    grid-column: var(--offset-xxl, auto) / span var(--size-xxl, 4);
  }
}
